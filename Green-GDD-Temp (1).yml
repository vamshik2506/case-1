AWSTemplateFormatVersion: '2010-09-09'
Description: Lemolite Application Stack - ALB, Bastion Host, EC2 (Frontend, Backend, MongoDB)

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH

  FrontendImageId:
    Type: String
    Description: AMI ID for Frontend EC2 instance

  BackendImageId:
    Type: String
    Description: AMI ID for Backend EC2 instance
  
  MongoDBImageId:
    Type: String
    Description: AMI ID for MongoDB EC2 instance
  BastionImageId:
    Type: String
    Description: AMI ID for Bastion Host EC2 instance

  Autoinstancetype:
    Description: Instance type for Auto Scaling Group
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.xlarge
      - t3.large
  BastionHostname:
    Description: Name of the Bastion Host specify with adding Green followed by the name
    Type: String
    Default: Bastion_Host_GDD_Green
    
  Bastioninstancetype:
    Description: Instance type for Bastion Host
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.xlarge
      - t3.large

  FrontendInstancename:
    Description: Name of the Frontend instance specify with adding Green followed by the name
    Type: String
    Default: Front_End_GDD_Green

  Frontendinstancetype:
    Description: Instance type for Frontend
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.micro
      - t3.xlarge
      - t3.large
  BackendInstancename:
    Description: Name of the Backend instance specify with adding Green followed by the name
    Type: String
    Default: Back_End_GDD_Green

  Backendinstancetype:
    Description: Instance type for Backend instance
    Type: String
    Default: t3.xlarge
    AllowedValues:
      - t3.micro
      - t3.xlarge
      - t3.large

  MongoDBInstancename:
    Description: Name of the MongoDB instance specify with adding Green followed by the name
    Type: String
    Default: MongoDB_GDD_Green
  MongoDBinstancetype:
    Description: Instance type for MongoDB instance
    Type: String
    Default: t3.xlarge
    AllowedValues:
      - t3.micro
      - t3.xlarge
      - t3.large

 
  FrontendMinSize:
    Type: Number
    Description: Minimum number of frontend instances
    Default: 1

  FrontendMaxSize:
    Type: Number
    Description: Maximum number of frontend instances
    Default: 3

  BackendMinSize:
    Type: Number
    Description: Minimum number of backend instances
    Default: 1

  BackendMaxSize:
    Type: Number
    Description: Maximum number of backend instances
    Default: 3

  MyIP:
    Type: String
    Default: 0.0.0.0/0
    Description: Your IP address to SSH into the Bastion host

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - KeyName
          - MyIP
    ParameterLabels:
      KeyName:
        default: EC2 Key Pair Name
      MyIP:
        default: SSH Access IP (CIDR)

Resources:

  # ----------------------- Security Groups --------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS to ALB
      VpcId: !ImportValue VpcName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB_SG_GDD_Green
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from MyIP
      VpcId: !ImportValue VpcName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
      Tags:
        - Key: Name
          Value: Bastion_SG_GDD_Green

  AppInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB and Bastion
      VpcId: !ImportValue VpcName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  
      Tags:
        - Key: Name
          Value: Front_End_SG_GDD_Green

  InternalALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internal ALB SG (receives traffic from frontend)
      VpcId: !ImportValue VpcName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref AppInstanceSG
      Tags:
        - Key: Name
          Value: ILB_SG_GDD

  AppAllowInternalALBIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppInstanceSG
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref InternalALBSG

  BackendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend instance SG
      VpcId: !ImportValue VpcName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref InternalALBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
      Tags:
        - Key: Name
          Value: Back_End_SG_GDD_Green

  MongoDbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MongoDB SG (only accessible from backend)
      VpcId: !ImportValue VpcName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref BackendSG
      Tags:
        - Key: Name
          Value: Database_SG_GDD_Green

  # ------------ EC2 Instances ---------------------------

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref Bastioninstancetype
      KeyName: !Ref KeyName
      ImageId: !Ref BastionImageId
      SubnetId: !ImportValue Publicsubnet2
      AvailabilityZone: ap-south-1b
      SecurityGroupIds:
        - !Ref BastionSG
      Tags:
        - Key: Name
          Value: !Ref BastionHostname

  FrontendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref Frontendinstancetype
      KeyName: !Ref KeyName
      ImageId: !Ref FrontendImageId
      SubnetId: !ImportValue Privatesubnet1
      AvailabilityZone: ap-south-1a
      SecurityGroupIds:
        - !Ref AppInstanceSG
      Monitoring: true
      Tags:
        - Key: Name
          Value: !Ref FrontendInstancename

  BackendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref Backendinstancetype
      KeyName: !Ref KeyName
      ImageId: !Ref BackendImageId
      SubnetId: !ImportValue Privatesubnet1
      AvailabilityZone: ap-south-1a
      SecurityGroupIds:
        - !Ref BackendSG
      Monitoring: true
      Tags:
        - Key: Name
          Value: !Ref BackendInstancename

  MongoDBInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref MongoDBinstancetype
      KeyName: !Ref KeyName
      ImageId: !Ref MongoDBImageId
      SubnetId: !ImportValue Privatesubnet1
      AvailabilityZone: ap-south-1a
      SecurityGroupIds:
        - !Ref MongoDbSG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y gnupg curl
          curl -fsSL https://pgp.mongodb.com/server-8.0.asc | gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg --dearmor
          echo "deb [ signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-8.0.list
          apt-get update -y
          apt-get install -y mongodb-org
          systemctl start mongod
          systemctl enable mongod
      Tags:
        - Key: Name
          Value: !Ref MongoDBInstancename

  # ---------------- Load Balancers -----------------------#

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VpcName
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      Targets:
      - Id: !Ref FrontendInstance
      Tags:
        - Key: Name
          Value: FE-TG-GDD-Green

  InternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: InternalBackendLBforGDDGreen
      Subnets:
        - !ImportValue Privatesubnet2
        - !ImportValue Privatesubnet1
      SecurityGroups:
        - !Ref InternalALBSG
      Type: application
      Scheme: internal
      Tags:
        - Key: Name
          Value: ILB-GDD-Green

  InternalTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VpcName
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Targets:
      - Id: !Ref BackendInstance
      Tags:
        - Key: Name
          Value: BE-TG-GDD-Green

  InternalListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref InternalTargetGroup
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 8080
      Protocol: HTTP
    # --- Launch templates ---
  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: FE_Launch_Template_GDD_Green
      LaunchTemplateData:
        InstanceType: !Ref Frontendinstancetype
        KeyName: !Ref KeyName
        ImageId: !Ref FrontendImageId
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups:
              - !Ref AppInstanceSG
            SubnetId: !ImportValue Privatesubnet1
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref FrontendInstancename

  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: BE_Launch_Template_GDD_Green
      LaunchTemplateData:
        InstanceType: !Ref Backendinstancetype
        KeyName: !Ref KeyName
        ImageId: !Ref BackendImageId
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups:
              - !Ref BackendSG
            SubnetId: !ImportValue Privatesubnet1
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref BackendInstancename

  #------------------ Auto Scaling Groups ------------------#           
  FrontendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      #
      AutoScalingGroupName: FE_ASG_GDD_Green
      MinSize: !Ref FrontendMinSize
      MaxSize: !Ref FrontendMaxSize
      DesiredCapacity: !Ref FrontendMinSize
      VPCZoneIdentifier:
        - !ImportValue Privatesubnet1
        - !ImportValue Privatesubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: FE_ASG_GDD_Green
          PropagateAtLaunch: true

  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      #AutoScalingGroupName: !Ref BackendAutoScalingGroupName
      AutoScalingGroupName: BE_ASG_GDD_Green
      MinSize: !Ref BackendMinSize
      MaxSize: !Ref BackendMaxSize
      DesiredCapacity: !Ref BackendMinSize
      VPCZoneIdentifier:
        - !ImportValue Privatesubnet1
        - !ImportValue Privatesubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref InternalTargetGroup
      Tags:
        - Key: Name
          Value: BE_ASG_GDD_Green
          PropagateAtLaunch: true

  FrontendCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up if frontend CPU >= 70%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref FrontendScaleUpPolicy

  BackendCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale up if backend CPU >= 70%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref BackendScaleUpPolicy

  FrontendScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 300

  BackendScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 300

  FrontendCPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale down if frontend CPU < 30%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref FrontendScaleDownPolicy

  BackendCPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale down if backend CPU < 30%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      AlarmActions:
       - !Ref BackendScaleDownPolicy

  FrontendScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

  BackendScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

#-----------------------------Outputs---------------------------#
Outputs:
  InternalLBEndpoint:
    Description: Internal Load Balancer DNS
    Value: !GetAtt InternalLoadBalancer.DNSName
    Export:
      Name: GreenInternalLBEndpoint

  BastionHostID:
    Value: !Ref BastionHost
    Export:
      Name: GreenBastionHostID

  BastionPublicIP:
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: GreenBastionPublicIP

  FrontendInstanceID:
    Value: !Ref FrontendInstance
    Export:
      Name: GreenFrontendInstanceID

  BackendInstanceID:
    Value: !Ref BackendInstance
    Export:
      Name: GreenBackendInstanceID

  MongoDBInstanceID:
    Value: !Ref MongoDBInstance
    Export:
      Name: GreenMongoDBInstanceID
  FrontendAutoScalingGroupID:
    Value: !Ref FrontendAutoScalingGroup
    Export:
      Name: GreenFrontendAutoScalingGroupID
  BackendAutoScalingGroupID:
    Value: !Ref BackendAutoScalingGroup
    Export:
      Name: GreenBackendAutoScalingGroupID
  TargetGroupArn:
    Value: !Ref ALBTargetGroup
    Export:
      Name: GreenALBTargetGroupArn
  InternalTargetGroupArn:
    Value: !Ref InternalTargetGroup
    Export:
      Name: GreenInternalTargetGroupArn




